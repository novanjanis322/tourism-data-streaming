version: '3'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka-network

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kafka-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - kafka-network

  producer:
    build:
      context: ./producer
      dockerfile: Dockerfile
    container_name: kafka-producer
    depends_on:
      - kafka
    restart: on-failure
    command: sh -c "sleep 30 && python producer.py --topic tourism_reviews --frequency 0.033"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    networks:
      - kafka-network
    volumes:
      - ./producer:/app

  spark-processor:
    build:
      context: ./spark-processor
      dockerfile: Dockerfile
    container_name: spark-processor
    depends_on:
      - kafka
    restart: on-failure
    environment:
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      KAFKA_TOPIC: ${KAFKA_TOPIC}
      GCP_PROJECT_ID: ${GCP_PROJECT_ID}
      BQ_DATASET_ID: ${BQ_DATASET_ID}
      BQ_PROCESSED_TABLE_ID: reviews_for_ml
      TEMP_GCS_BUCKET: ${TEMP_GCS_BUCKET}
      GOOGLE_APPLICATION_CREDENTIALS: /secrets/service-account.json
    volumes:
      - ./spark-processor:/app
      - ./secrets:/secrets
    networks:
      - kafka-network

  consumer:
    build:
      context: ./consumer
      dockerfile: Dockerfile
    container_name: kafka-consumer
    depends_on:
      - kafka
    restart: on-failure
    environment:
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      KAFKA_TOPIC: ${KAFKA_TOPIC}
      KAFKA_GROUP_ID: ${KAFKA_GROUP_ID}
      GCP_PROJECT_ID: ${GCP_PROJECT_ID}
      BQ_DATASET_ID: ${BQ_DATASET_ID}
      BQ_TABLE_ID: ${BQ_RAW_TABLE_ID}
      GOOGLE_APPLICATION_CREDENTIALS: /secrets/service-account.json
    volumes:
      - ./consumer:/app
      - ./secrets:/secrets
    command: sh -c "sleep 45 && python consumer.py"
    networks:
      - kafka-network

networks:
  kafka-network:
    driver: bridge